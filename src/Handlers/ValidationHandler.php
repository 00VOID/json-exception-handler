<?php

namespace SMartins\Exceptions\Handlers;

use SMartins\Exceptions\JsonApi\Error;
use SMartins\Exceptions\JsonApi\Source;
use SMartins\Exceptions\JsonApi\ErrorCollection;

class ValidationHandler extends AbstractHandler
{
    /**
     * {@inheritDoc}
     */
    public function handle()
    {
        $errors = new ErrorCollection;
        $errors->setStatusCode(400);

        $validationMessages = $this->getTreatedMessages();
        $validationFails = $this->getTreatedFails();

        foreach ($validationMessages as $field => $messages) {
            foreach ($messages as $key => $message) {
                $attributes = $this->getValidationAttributes($validationFails, $key, $field);

                $error = (new Error)->setStatus(422)
                    ->setSource((new Source())->setPointer($field))
                    ->setTitle($attributes['title'] ?? $this->getDefaultTitle())
                    ->setDetail($message);

                if (! is_null($attributes['code'])) {
                    $error->setCode($attributes['code']);
                }

                $errors->push($error);
            }
        }

        return $errors;
    }

    public function getValidationAttributes(array $validationFails, $key, $field)
    {
        return [
            'code' => $this->getValidationCode($validationFails, $key, $field),
            'title' => $this->getValidationTitle($validationFails, $key, $field),
        ];
    }

    public function getValidationTitle(array $validationFails, $key, $field)
    {
        $title = __('exception::exceptions.validation.title', [
            'fails' => array_keys($validationFails[$field])[$key],
            'field' => $field,
        ]);

        return is_array($title) ? $title[0] : $title;
    }

    public function getValidationCode(array $validationFails, $key, $field)
    {
        $rule = strtolower(array_keys($validationFails[$field])[$key]);

        return config('json-exception-handler.codes.validation_fields.'.$field.'.'.$rule);
    }

    /**
     * Get message based on exception type. If exception is generated by
     * $this->validate() from default Controller methods the exception has the
     * response object. If exception is generated by Validator::make() the
     * messages are getted different.
     *
     * @return array
     */
    public function getTreatedMessages()
    {
        return $this->exception->validator->messages()->messages();
    }

    public function getTreatedFails()
    {
        return $this->exception->validator->failed();
    }
}
